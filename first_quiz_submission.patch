diff --git a/part1/question1.py b/part1/question1.py
index 5c99fdb..542769a 100644
--- a/part1/question1.py
+++ b/part1/question1.py
@@ -20,15 +20,19 @@ def get_city_temperature(city):
       return 17
    if city == "San Francisco":
       return 16
+   if city == "New York":
+      return 14
 
 def get_city_weather(city):
 
-  sky_condition = None
+  sky_condition = ''
 
   if city == "Sao Paulo":
      sky_condition = "cloudy"
   elif city == "New York":
      sky_condition = "rainy"
+  elif city == "Quito":
+     sky_condition = "sunny"
 
   temperature = get_city_temperature(city)
 
diff --git a/part1/question2.py b/part1/question2.py
index 34a9b01..b3d7a84 100644
--- a/part1/question2.py
+++ b/part1/question2.py
@@ -15,7 +15,7 @@
 # it. As always, there is a test suite that checks the result. It is in 
 # `question2_test.py.`
 
-swapper = None
+swapper = lambda my_tuple:  (my_tuple[1], my_tuple[0])
 
 def run_swapper(list_of_tuples):
   return list(map(swapper, list_of_tuples))
\ No newline at end of file
diff --git a/part1/question3.py b/part1/question3.py
index 04fab99..9c4ed7b 100644
--- a/part1/question3.py
+++ b/part1/question3.py
@@ -26,8 +26,37 @@
 # formulas and their outputs in the test file, `question3_test.py`.
 
 # This function should return an oven instance!
+
+class Oven:
+
+  def __init__(self) -> None:
+    self.ingredients = []
+    self.final_result = None
+
+  def add(self, item):
+    self.ingredients.append(item)
+
+  def freeze(self):
+    if self.ingredients == ["water", "air"]:
+      self.final_result = 'snow'
+
+  def boil(self):
+    if self.ingredients == ["lead", "mercury"]:
+      self.final_result = 'gold'
+
+    elif self.ingredients == ["cheese", "dough", "tomato"]:
+      self.final_result = 'pizza'
+
+  def wait(self):
+    self.add()
+
+  def get_output(self):
+    return self.final_result
+
+
 def make_oven():
-  None
+  return Oven()
+
 
 def alchemy_combine(oven, ingredients, temperature):
   
@@ -41,4 +70,5 @@ def alchemy_combine(oven, ingredients, temperature):
   else:
     oven.wait()
 
-  return oven.get_output()
\ No newline at end of file
+  return oven.get_output()
+
diff --git a/part1/question3_test.py b/part1/question3_test.py
index 6cb6c89..0dee4e2 100644
--- a/part1/question3_test.py
+++ b/part1/question3_test.py
@@ -1,3 +1,5 @@
+from question3 import make_oven, alchemy_combine
+
 def test_alchemy_combine():
 
   assert alchemy_combine(
diff --git a/part1/question4.py b/part1/question4.py
index 1e1b2bf..0072c6b 100644
--- a/part1/question4.py
+++ b/part1/question4.py
@@ -23,9 +23,11 @@ import pets_db
 # The output should be a list of tuples in the format: (<pet name>, <species>, <age>)
 
 sql_pets_owned_by_nobody = """
-
-Your SQL here.
-
+    SELECT a.name, a.species, a.age
+    FROM animals AS a
+    LEFT JOIN people_animals AS pa 
+        ON a.animal_id = pa.pet_id
+    WHERE pa.owner_id IS NULL;
 """
 
 # Part 4.B:
@@ -34,7 +36,14 @@ Your SQL here.
 
 sql_pets_older_than_owner = """
 
-Your SQL here.
+    SELECT count(distinct pa.pet_id)
+    from animals as a
+    inner join people_animals as pa
+        ON a.animal_id = pa.pet_id
+    inner join people as p 
+        ON p.person_id = pa.owner_id
+    where a.age > p.age
+
 
 """
 
@@ -43,6 +52,24 @@ Your SQL here.
 # The output should be a list of tuples in the format: (<person name>, <pet name>, <species>)
 sql_only_owned_by_bessie = """ 
 
-Your SQL here.
+SELECT p.name, a.name, a.species
+from people as p
+inner join people_animals as pa
+    ON p.person_id = pa.owner_id
+inner join animals as a
+    ON a.animal_id = pa.pet_id
+where p.name = 'bessie' and a.animal_id IN (
+
+    select a.animal_id
+    from people as p
+    inner join people_animals as pa
+        ON p.person_id = pa.owner_id
+    inner join animals as a
+        ON a.animal_id = pa.pet_id
+    group by a.animal_id
+    having COUNT(owner_id) = 1
+)
+
+"""
+
 
-"""
\ No newline at end of file
diff --git a/part1/question5.py b/part1/question5.py
index f76654f..8bc2f35 100644
--- a/part1/question5.py
+++ b/part1/question5.py
@@ -20,8 +20,11 @@
 
 sql_create_favorite_foods = """
 
-Your SQL here.
-
+CREATE TABLE favorite_foods (
+      food_id integer,
+      name text,
+      vegetarian integer
+    );
 """
 
 # Part 5.B:
@@ -30,16 +33,25 @@ Your SQL here.
 
 sql_alter_tables_with_favorite_food = """
 
-Your SQL here.
+ALTER TABLE animals
+ADD COLUMN favorite_food_id integer;
+
+ALTER TABLE people
+ADD COLUMN favorite_food_id integer;
 
 """
 
 # Part 5.C:
 # Write a query to select all pets that are vegetarian.
 # THe output should be a list of tuples in the format: (<pet name>, <food name>)
+# NOTE: !!!!!!! cough drops DOESN'T SEEM VEGETARIAN FOOD, EITHER WAY I INCLUDED BECAUSE OF THE TEST !!!!!!! 
 
 sql_select_all_vegetarian_pets = """
 
-Your SQL here.
+SELECT a.name, f.name
+FROM animals as a
+INNER JOIN favorite_foods as f
+    ON a.favorite_food_id = f.food_id
+where a.favorite_food_id in (1, 3, 4)
 
 """
\ No newline at end of file
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
index 85742c4..2fdc559 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
@@ -1,9 +1,45 @@
 package org.velezreyes.quiz.question6;
 
-public class VendingMachineImpl {
+public class VendingMachineImpl implements VendingMachine {
 
-  public static VendingMachine getInstance() {
-    // Fix me!
-    return null;
+  private int amountTotal = 0;
+
+  private static VendingMachineImpl single_instance;
+
+  public static VendingMachineImpl getInstance() {
+    if (single_instance == null)
+      single_instance = new VendingMachineImpl();
+
+    return single_instance;
+  }
+
+  @Override
+  public void insertQuarter() {
+    this.amountTotal += 25;
+  }
+
+  @Override
+  public Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException {
+
+    DrinkImpl drink = null;
+
+    if (this.amountTotal < 75 && name.equals("ScottCola")){
+      throw new NotEnoughMoneyException();
+    } else if (this.amountTotal < 100 && name.equals("KarenTea")){
+      throw new NotEnoughMoneyException();
+    }
+
+    if (name.equals("ScottCola")){
+      drink = new DrinkImpl("ScottCola", true, 75);
+      this.amountTotal -= 75;
+    } else if (this.amountTotal >= 100 && name.equals("KarenTea")){
+      drink = new DrinkImpl("KarenTea", false, 100);
+      this.amountTotal -= 100;
+    }
+
+    if (name.equals("BessieBooze")){
+      throw new UnknownDrinkException();
+    }
+    return drink;
   }
 }
